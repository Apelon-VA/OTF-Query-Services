<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<article xml:id="org.ihtsdo.otf.query_query-documentation" xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <info>
        <title>Query Service</title>
        <author>
            <orgname>IHTSDO</orgname>
            <address>
                <city>Copenhagen K</city>
                <street>Gammeltorv 4, 1.</street>
                <postcode>1457</postcode>
                <country>Denmark</country>
            </address>
        </author>
    </info>
    <section>
        <title>Project overview</title>
        <para>The OTF-Query-Services module is a component of the IHTSDO Open Terminology Tooling
            Framework that implements queries that can be conducted against a Berkeley SNOMED
            database. The project illustrates examples of how queries can be executed from within
            Java or from a REST client server. The input parameters and syntax of the queries is
            derived from <link xlink:href="http://en.wikipedia.org/wiki/FLWOR">XQuery FLWOR
                expressions</link>. </para>
    </section>
    <section>
        <title>Project requirements</title>
        <para>A working knowledge of Maven is a preqrequisite to understanding how to build and work
            with the query service. More information on Maven is available at the <link
                xlink:href="http://maven.apache.org">Apache Maven</link> site. Maven supports
            project aggregation in addition to preoject inheritance through its module structure.
            See <link xlink:href="http://maven.apache.org/guides/mini/guide-multiple-modules.html"
                >Maven's Guide to Working with Multiple Modules</link> and <link
                xlink:href="http://maven.apache.org/guides/introduction/introduction-to-the-pom.html"
                >Maven's Introduction to the POM</link> for more information about Maven modules,
                project inheritance, and project aggregation. </para>
        <para>The minimum software requirements for the project are as follows: <orderedlist>
                <listitem>
                    <para><link xlink:href="http://maven.apache.org/download.cgi">Apache Maven
                            3.1.0</link></para>
                </listitem>
                <listitem>
                    <para><link
                            xlink:href="http://www.oracle.com/technetwork/java/javase/downloads/java-se-jre-7-download-432155.html"
                            >Java 1.7</link> or higher</para>
                </listitem>
            </orderedlist>If you plan to perform queries using the REST service, you will need to
            install an <link xlink:href="http://tomcat.apache.org/download-70.cgi">Apache Tomcat 7.0
                server</link>. </para>
    </section>
    <section>
        <title>Setup</title>
        <section>
            <title>Maven</title>
            <para>In order to build the Query Service project, developers must either install Maven
                3.1.0 to use from the command line, use an IDE that has Maven 3.1.0 already
                integrated (IntelliJ IDEA, Netbeans), or add a plugin to their IDE that adds Maven
                3.1.0 support. Instructions on installing Maven for use from the command line are
                available at Maven's <link xlink:href="http://maven.apache.org/download.cgi"
                    >download site</link>. Integration information for IntelliJ IDEA is available
                from the Jetbrains wiki for <link
                    xlink:href="http://wiki.jetbrains.net/intellij/Creating_and_importing_Maven_projects"
                    >creating and importing maven projects</link>. Integration information for
                Netbeans is available from Netbean's <link
                    xlink:href="http://wiki.netbeans.org/Maven">Maven wiki page</link>.</para>
            <para>Please note that the project build requires the most recent version of Maven
                (3.1.0) and Java 1.7 or higher. Ensure that you are running the minimum requirements
                for Maven and Java by entering the command <code>mvn --version</code>, which will
                output the Maven and Java versions running on your machine. If the output displays a
                version earlier than 1.7, download it <link
                    xlink:href="http://www.oracle.com/technetwork/java/javase/downloads/java-se-jre-7-download-432155.html"
                    >here</link> and ensure that JAVA_HOME and PATH variables are set to point at a
                JDK 1.7 or higher. </para>
            <para>Once Maven is configured, you will need to download JavaFX artifacts to your local
                repository by running the command <code>mvn
                    org.codeartisans.javafx:javafx-deployer-maven-plugin:1.2:install</code> from a
                directory that is not a Maven project.</para>
            <para>To access the artifact dependencies necessary to build the project, the Maven
                settings.xml file must be appropriately configured. More information about the
                settings.xml file and its location is available on Maven's <link
                    xlink:href="http://maven.apache.org/settings.html">Settings Reference</link> web
                page. As noted in the Settings Reference page, locate and edit the settings.xml in
                the directory <code>${user.home}/.m2/</code>.</para>
            <para>For build profiles other than the default build, developers will need an account
                to download artifacts in the IHTSDO's repository, which can be requested from Rory
                Davidson. Below is a copy of a settings.xml that allows a user to conduct the
                default build. In order to perform other build profiles, enter IHTSDO Maestro
                credentials into the username and password fields.</para>
            <example>
                <title>Example settings.xml file</title>
                <para>
                    <programlistingco>
                        <areaspec>
                            <area xml:id="ex.plco.ret" coords="12,12" units="linecolumn"/>
                            <area xml:id="ex.plco.dest" coords="13,13" units="linecolumn"/>
                        </areaspec>
                        <programlisting>                    
&lt;?xml version="1.0" encoding="UTF-8"?> 
&lt;settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation=
"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">> 
     &lt;servers> 
         &lt;server>
             &lt;id>maestro&lt;/id> 
             &lt;username>username&lt;/username>
             &lt;password>password&lt;/password> 
          &lt;/server> 
      &lt;/servers> 
      &lt;mirrors>
         &lt;mirror> 
             &lt;id>maestro&lt;/id> 
             &lt;mirrorOf>external:*&lt;/mirrorOf>
             &lt;name>IHTSDO Maestro&lt;/name>
 &lt;url>https://mgr.servers.aceworkspace.net/apps/ihtsdo-archiva/repository/all/&lt;/url>
         &lt;/mirror> 
     &lt;/mirrors> 
&lt;/settings> 
                    </programlisting>
                    </programlistingco>
                </para>
            </example>
        </section>
        <section>
            <title>Java</title>
            <para>The Query service project requires Java 1.7 or higher. To give Java more heap
                space, you should set the following JAVA_OPTS: <code>-J-Xss2m -J-Xms1g -J-Xmx2g
                    -J-XX:PermSize=1600m</code>. If you're using the command line, these options can
                be set with the command <code>JAVA_OPTS set -J-Xss2m -J-Xms1g -J-Xmx2g
                    -J-XX:PermSize=1600m</code>. Within Netbeans, these options should be added to
                the <code>netbeans_default_options</code> in the <code>netbeans.conf</code>
                file.</para>
        </section>
        <section>
            <title>Tomcat setup</title>
            <para>Apache Tomcat 7.0 can be downloaded <link
                    xlink:href="http://tomcat.apache.org/download-70.cgi">here</link>. Configure
                Tomcat with the following startup with the following JVM options: <code>-Xmx6g
                    -Xms6g -XX:PermSize=256m -XX:MaxPermSize=512m
                    -Dorg.ihtsdo.otf.tcc.datastore.bdb-location=&lt;location of the berkeley-db
                    folder></code>. This is how these parameters are set based upon your operating system:<orderedlist>
                    <listitem>
                        <para>Windows - use the command <code>--JvmOptions</code> to set the above
                            options. For more information on command-line parameters for Tomcat 7 on
                            a Windows machine, please see this <link
                                xlink:href="http://tomcat.apache.org/tomcat-7.0-doc/windows-service-howto.html#Command_line_parameters"
                                >link</link>.</para>
                    </listitem>
                    <listitem>
                        <para>Linux/ Unix - add the given parameters as <code>JAVA_OPTS</code> in
                            the <code>catalina.sh</code> file, which is located in the
                                <code>/bin</code> folder within Tomcat.</para>
                    </listitem>
                </orderedlist>This <link xlink:href="http://wolfpaulus.com/jounal/mac/tomcat7"
                    >link</link> gives explicit instructions on how to configure your machine to
                launch Tomcat from the command line with <code>startup.sh</code> and
                    <code>shutdown.sh</code> scripts in OS X.</para>
            <para>If you want to run Tomcat within Netbeans, this <link
                    xlink:href="http://technology.amis.nl/2012/01/02/installing-tomcat-7-and-configuring-as-server-in-netbeans/"
                    >link</link> gives directions on how to download Apache 7.0 and configure it to
                run within Netbeans. Include the startup parameters stated above in the VM Options
                box.</para>
        </section>
    </section>
    <section>
        <title>Project checkout</title>
        <para>The Query service project can be checked out anonymously from GIT by entering the
            prompt <code>$git clone https://github.com/IHTSDO/OTF-Query-Services.git</code> in
            an empty directory folder. </para>
    </section>
    <section>
        <title>Query service build profiles</title>
        <para>The query service defines five build profiles described in the following sections. For
            more information on build profiles, see Maven's <link
                xlink:href="http://maven.apache.org/guides/introduction/introduction-to-profiles.html"
                >Introduction to build profiles</link>. The default build is the only build profile
            that can be conducted without acquiring IHTSDO Maestro credentials.</para>
        <para>A developer can execute the builds from the command line, using the appropriate
            command described below, or from an IDE that supports Maven by selecting the desired
            build profile.</para>
        <section>
            <title>Default build profile</title>
            <para>The default build profile consists of the modules that build when no profile is
                specified. By default the following modules are built:<orderedlist>
                    <listitem>
                        <para>Client</para>
                    </listitem>
                    <listitem>
                        <para>JAXB objects</para>
                    </listitem>
                </orderedlist></para>
            <para>This profile will provide a sufficient build to test the query client with the
                provided settings.xml file. </para>
            <para>These artifacts are located in the IHTSDO public Maven repository, and a user can
                perform the default build without IHTSDO Maestro credentials.</para>
            <para>The default build can be conducted from the console with the command <code>$mvn
                    clean install</code></para>
        </section>
        <section>
            <title>Query Service build profile</title>
            <para>This profile will build the query service and dependent modules. This project has
                more dependencies, including dependencies in the IHTSDO Maven repository, which
                required a user account. </para>
            <para>The command for this build is <code>$mvn clean install -P
                query-service</code></para>
        </section>
        <section>
            <title>Integration tests build profile</title>
            <para>The integration tests build profile adds the integration tests module to the
                build. The integration tests are not part of the default build profile because they
                have an external dependency on a Berkeley SNOMED database that is rather large, and
                downloading and opening this database may not be necessary for all types of
                development. Omitting this module from the default build profile makes the default
                build rapid. </para>
            <para>Assuming all of the required dependencies are installed, the build time for the
                integration tests module takes about 1 min 20 sec on a high-spec developers laptop,
                while the other modules in this project take between 0.5 and 5 seconds. To build
                this from the console, use the command <code>$mvn clean install -P
                    integration-tests</code></para>
        </section>
        <section>
            <title>Documentation build profile</title>
            <para>The documentation build profile adds the integration tests module and the
                documentation module to the build when the build profile id <emphasis role="italic"
                    >documentation</emphasis> is activated. Generation of documentation depends of
                proper execution of the integration tests module, and therefore is removed from the
                default build profile secondary to the resource requirements and build time of the
                integration tests module. </para>
            <para>Execute the documentation profile build with the command <code>$mvn clean install
                    -P documentation</code>.</para>
        </section>
        <section>
            <title>All build profile</title>
            <para>Perform all of the goals listed in the above build profiles with the command
                    <code>$mvn clean install -P all</code>.</para>
        </section>
    </section>
    <xi:include href="../../target/generated-resources/org.ihtsdo.otf/query-parent/query-parent.xml"
        xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <section>
        <title>Deploy to app server</title>
        <para>The default build command generates a <code>.war</code> file that can be deployed to
            an app server. Before deployment the app server must be properly configured with
            adequate memory and access to the Berkeley database folder. The database folder can be
            accessed from the <link
                xlink:href="https://csfe.aceworkspace.net/sf/frs/do/listReleases/projects.the_ihtsdo_terminology_open_tool/frs.test_data"
                >file releases section</link> of the <link
                xlink:href="https://csfe.aceworkspace.net/sf/projects/the_ihtsdo_terminology_open_tool/"
                >Open Tooling Framework</link> website.</para>
        <para>If the database source is set correctly, you should see the following in the output
            when you start the Tomcat server:</para>
        <para>
            <programlisting> 
Starting BdbTerminologyStore for ChronicleServletContainer in background thread. 
Aquired startup permit. 
setup dbRoot: /Users/dylangrald/NetBeansProjects/berkeley-db
absolute dbRoot: /Users/dylangrald/NetBeansProjects/berkeley-db
Sep 13, 2013 2:09:39 PM org.ihtsdo.otf.tcc.datastore.BdbTerminologyStore
INFO: org.ihtsdo.otf.tcc.datastore.bdb-location set. Starting from location: /Users/dylangrald/NetBeansProjects/berkeley-db
                </programlisting>
        </para>
        <para>When you run the REST server, it opens the Berkeley database located in the folder
            berkeley-db, wherever that relative path is on your server and writes diagnostic output
            as follows: </para>
        <para>
            <programlisting>Aquired startup permit. 
setup dbRoot: /Users/dylangrald/NetBeansProjects/berkeley-db
absolute dbRoot: /Users/dylangrald/NetBeansProjects/berkeley-db
Sep 13, 2013 2:13:43 PM org.glassfish.jersey.server.ApplicationHandler initialize
INFO: Initiating Jersey application, version Jersey: 2.2 2013-08-14 08:51:58...
Sep 13, 2013 2:13:43 PM org.ihtsdo.otf.tcc.datastore.temp.LogWithAlerts info
INFO: NidCidMap readOnlyRecords: 812
Sep 13, 2013 2:13:43 PM org.ihtsdo.otf.tcc.datastore.temp.LogWithAlerts info
INFO: NidCidMap mutableRecords: 0
Sep 13, 2013 2:13:44 PM org.apache.catalina.util.LifecycleBase start</programlisting>
        </para>
        <para>
            <programlisting> 
INFO: QS_sprint2:_Query_rest_service was successfully deployed in 3,637 milliseconds. 
INFO: org.ihtsdo.otf.tcc.datastore.bdb-location not set. Using default location of: berkeley-db 
INFO: setup dbRoot: berkeley-db 
INFO: absolute dbRoot: //Users/dylangrald/NetBeansProjects/berkeley-db
INFO: NidCidMap readOnlyRecords: 812 
INFO: NidCidMap mutableRecords: 0 
                </programlisting>
        </para>
        <para>And takes a few minutes to open. Inside the test data is an old format view
            coordinate. So, it throws a serialization exception: </para>
        <para>
            <programlisting> 
SEVERE: java.io.StreamCorruptedException: unexpected block data at
        java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1362) at
        java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1989) at
        java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1913) at
        java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1796)
                </programlisting>
        </para>
        <para>Just ignore that… It will self heal.</para>
    </section>
    <section>
        <title>Module overview</title>
        <xi:include
            href="../../target/generated-resources/org.ihtsdo.otf/query-client/query-client.xml"
            xmlns:xi="http://www.w3.org/2001/XInclude"/>

        <xi:include
            href="../../target/generated-resources/org.ihtsdo.otf/query-implementation/query-implementaton.xml"
            xmlns:xi="http://www.w3.org/2001/XInclude"/>

        <xi:include
            href="../../target/generated-resources/org.ihtsdo.otf/query-integration-tests/query-integration-tests.xml"
            xmlns:xi="http://www.w3.org/2001/XInclude"/>
        <xi:include
            href="../../target/generated-resources/org.ihtsdo.otf/query-service/query-service.xml"
            xmlns:xi="http://www.w3.org/2001/XInclude"/>

        <xi:include
            href="../../target/generated-resources/org.ihtsdo.otf/query-jaxb-objects/data-display-objects.xml"
            xmlns:xi="http://www.w3.org/2001/XInclude"/>

        <xi:include href="documentation-strategy.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    </section>
</article>
